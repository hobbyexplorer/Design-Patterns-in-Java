package model;

import gamemaker.GameMaker;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageObserver;
import java.security.SignatureException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.omg.CORBA.FREE_MEM;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Class name : GameObject Class Responsibilities: storing the win&lose
 * condition and save it to xml Class Collaborators: * SpriteAction.java,
 * GameMaker.java, SpriteObject.java
 */

public class GameObject
{
	//x and y position of the object
	private int x;
	private int y;

	//height and width of the object, wich will be initialized by the sprite to which it belongs,
	//and is similar to the height and width of the sprite.
	private int height;
	private int width;

	//private int deltaX;
	//private int deltaY;

	private int speed;
	private int angle;

	private Shape shape;

	//Color of the object.
	private Color color;

	//objectId is generated by the sprite class to manage an array-list of the objects
	private int objectId;

	//the image of the object.
	private Image image;

	private Boolean visible;
	private boolean resize =false;
	private boolean selected = false;
	private long lastVisibilityToggle;

	//the image rotation angle.
	private int imageRotationAngle;

	private int initialHeight;
	private int initialWidth;
	private double widthrate=1;
	private double  heightrate=1;
	

	private Boolean rotatedFlag;
	 
	public GameObject()
	{
		 // TODO Auto-generated constructor stub
	}
	public GameObject(int objectId, int x, int y, int height, int width,double widthrate, double heightrate){
		this.objectId = objectId;
		this.height = height;
		this.width = width;
		this.x = x;
		this.y = y;
		this.initialWidth = width;
		this.initialHeight = height;
		this.imageRotationAngle = 0;
		this.rotatedFlag = false;
		this.visible = true;
		this.widthrate=widthrate;
		this.heightrate=heightrate;
		
	}
	public final void setWidth(int width) {
		this.width = width;
	}

	/*
	 * Returns the width for the sprite.
	 *
	 * @return the width
	 */
 
	public final void setHeightRate(double heightrate){
		this.heightrate=heightrate;
	}
	public final void setWidthRate(double widthrate){
		this.widthrate=widthrate;
	}
	public final double getWidthRate() {
		return this.widthrate;
	}
	public final double getHeightRate() {
		return this.heightrate;
	}

 
	public int getintialWidth(){
		return initialWidth;
	}
	public int getintialHeight(){
		return initialHeight;
	}
	
	public void draw(Graphics g)
	{
 
		this.shape.draw(g, this.getX(), this.getY(), this.getObjectWidth(), this.getObjectHeight(), this.getColor(), this.getImage(), this.getImageRotationAngle(), this.visible,this.resize,this.selected,this.widthrate, this.heightrate);
		//System.out.println("draw!!!");
		
	}
	public void  setResize(boolean resize){
		this.resize = resize;
	}
	public void  setSelected(boolean selected){
		this.selected =  selected;
	}
	public void moveObject()
	{
		
		int tempAngle = this.getAngle();
		int tempSpeed = this.getSpeed();
		int deltaX = 0;
		int deltaY = 0;
		if (tempAngle==90||tempAngle==270)
		{
			  System.out.println("angle == 90");
			  deltaX = 0;
			  deltaY = -1*tempSpeed;
		}
		if (tempAngle==180||tempAngle==0)
		{
			  deltaX = -1*tempSpeed;
			  deltaY = 0;
		}
		
		else
		{
		 deltaX = (int)Math.round((Math.cos(Math.toRadians(tempAngle))*(double)tempSpeed));
		 deltaY = (int)Math.round((Math.sin(Math.toRadians(tempAngle))*(double)tempSpeed));
		}
		System.out.println(this.getY());
		this.setX(this.getX()+deltaX);
		this.setY(this.getY()+deltaY); 
		System.out.println(this.getY());
	}

	public void moveObjectBy(int angle, int speed)
	{
		int deltaX = (int)Math.round((Math.cos(Math.toRadians(angle))*(double)speed));
		int deltaY = (int)Math.round((Math.sin(Math.toRadians(angle))*(double)speed));

		this.setX(this.getX()+deltaX);
		this.setY(this.getY()-deltaY);

	}

	public void moveHorizontal(int by){
		this.x += by;
	}

	public void moveVertical(int by){
		this.y += by;
	}

	public void moveRight(){
		this.setX(this.getX() + this.getSpeed());
	}

	public void moveLeft(){
		this.setX(this.getX() - this.getSpeed());
	}

	public void moveUp(){
		this.setY(this.getY() - this.getSpeed());
	}

	public void moveDown(){
		this.setY(this.getY() + this.getSpeed());
	}

	public void contract(int contracBy){
		double reduceByScale = (double)contracBy/100;
		double resultScale = 1.0 - reduceByScale;
		double displaceXBy = (double)this.getObjectWidth()*reduceByScale/2.0;
		double displaceYBy = (double)this.getObjectHeight()*reduceByScale/2.0;

		if((double)getObjectHeight()*reduceByScale > 1 && (double)getObjectWidth()*reduceByScale > 1){
			moveHorizontal((int)Math.round(displaceXBy));
			moveVertical((int)Math.round(displaceYBy));
			this.setObjectHeight((int)Math.round((double)this.getObjectHeight() * resultScale));
			this.setObjectWidth((int)Math.round((double)this.getObjectWidth() * resultScale));
			this.updateImageBounds();
		}
		//System.out.println("Object Width: " + this.getObjectWidth());
		//System.out.println("Object Height: " + this.getObjectHeight());
	}

	public void expand(int expandBy){
		double enlargeByScale = (double)expandBy/100;
		double resultScale = 1.0 + enlargeByScale;
		double displaceXBy = (double)this.getObjectWidth()*enlargeByScale/2.0;
		double displaceYBy = (double)this.getObjectHeight()*enlargeByScale/2.0;

		moveHorizontal((int)Math.round(-1.0 * displaceXBy));
		moveVertical((int)Math.round(-1.0 * displaceYBy));
		this.setObjectHeight((int)Math.round((double)this.getObjectHeight() * resultScale));
		this.setObjectWidth((int)Math.round((double)this.getObjectWidth() * resultScale));
		this.updateImageBounds();
	}

	public void updateImageBounds()
	{
		BufferedImage tempImg = new BufferedImage(this.getObjectWidth(), this.getObjectHeight(), BufferedImage.TYPE_INT_ARGB);
		Graphics2D g2d = (Graphics2D)tempImg.createGraphics();
		g2d.scale((double)this.getObjectWidth()/(double)this.getImage().getWidth(null), (double)this.getObjectHeight()/(double)this.getImage().getHeight(null));
		g2d.drawImage(this.getImage(), 0, 0, null);
		g2d.dispose();
		this.setImage(Toolkit.getDefaultToolkit().createImage(tempImg.getSource()));
	}

	public void changeImageBounds()
	{
		BufferedImage tempImg = new BufferedImage(this.getObjectWidth(), this.getObjectHeight(), BufferedImage.TYPE_INT_ARGB);
		Graphics2D g2d = (Graphics2D)tempImg.createGraphics();
		 	g2d.drawImage(this.getImage(), x, y,width,height, null);
		g2d.dispose();
		this.setImage(Toolkit.getDefaultToolkit().createImage(tempImg.getSource()));
		
	}

	public void updateAngle(int by){
		
		System.out.println("Angle updated");
		int curAngle = this.getAngle();
		int tempAngle = curAngle + by;
		if(tempAngle < 0){
			System.out.println("1");
			this.setAngle(360 - tempAngle);
		}
		else if(tempAngle > 359){
			System.out.println("2");
			this.setAngle(tempAngle - 360);
		}
		System.out.println("3");
		this.setAngle(tempAngle);
	}

	public void updateImageRotationAngle(int by){
		int curAngle = this.getImageRotationAngle();
		int tempAngle = curAngle - by;
		if(tempAngle < 0){
			this.setImageRotationAngle(360 + tempAngle);
		}
		else if(tempAngle > 359){
			this.setImageRotationAngle(tempAngle - 360);
		}
		else this.setImageRotationAngle(tempAngle);
	}

	public void reflectFromVerticalSurface(){
		int curAngle = this.getAngle();
		if((curAngle < 90 && curAngle >= 0)||(curAngle < 360 && curAngle > 270)){
			if(curAngle < 90 && curAngle >= 0){
				this.updateAngle(180-2*(curAngle));
			}
			else if(curAngle < 360 && curAngle > 270){
				this.updateAngle(180+2*(360-curAngle));
			}
		}

		else if((curAngle <= 270 && curAngle >= 180)||(curAngle >= 90 && curAngle < 180)){
			if(curAngle <= 270 && curAngle >= 180){
				this.updateAngle(2*(270-curAngle));
			}
			else if(curAngle >= 90 && curAngle < 180){
				this.updateAngle(360-2*(curAngle-90));
			}
		}
	}

	public void reflectFromHorizontalSurface(){
		System.out.println("bouncing Hor");
		int curAngle = this.getAngle();
		
		if((curAngle >= 0 && curAngle <=90)||(curAngle > 90 && curAngle < 180)){
			if(curAngle >= 0 && curAngle <=90){
				System.out.println("1");
			
				this.updateAngle(360-(2*curAngle));
				
			}
			else if(curAngle > 90 && curAngle < 180){
				System.out.println("2");
				this.updateAngle(2*(180-curAngle));
			}
		}
		//collision with bottom wall
		else if((curAngle >= 270 && curAngle < 360)||(curAngle >= 180 && curAngle < 270)){
			if(curAngle >= 270 && curAngle < 360){
				this.updateAngle(2*(360-curAngle));
			}
			else if(curAngle >= 180 && curAngle < 270){
				this.updateAngle(360-2*(curAngle-180));
			}
		}

	}

	public void toggleVisibility(){
		this.visible = !this.visible;
	}

	public void setX(int x)
	{
		this.x = x;
	}

	public int getX()
	{
		return x;
	}

	public void setY(int y)
	{
		this.y = y;
	}

	public int getY()
	{
		return y;
	}
 
	

	public void setObjectHeight(int height)
	{
		this.height = height;
	}

	public int getObjectHeight()
	{
		return height;
	}

	public void setObjectWidth(int width)
	{
		this.width = width;
	}
	 
	public int getObjectWidth()
	{
		return width;
	}
	
	public void setObjectSize(int x, int y,int width , int height)
	{
		this.x =x;
		this.y =y;
		this.width = width;
		this.height = height;
	}


	public void setColor(Color color)
	{
		this.color = color;
	}

	public Color getColor()
	{
		return color;
	}

	public void setObjectId(int objectId)
	{
		this.objectId = objectId;
	}

	public int getObjectId()
	{
		return objectId;
	}

	public void setImage(Image image)
	{
		this.image = image;
	}
	int i =0;
	public Image getImage()
	{
		if(i==0)
			return image;
		i++;
		return null;//image;
	}
	/*
	public void setDeltaX(int deltaX)
	{
		this.deltaX = deltaX;
	}

	public int getDeltaX()
	{
		return deltaX;
	}

	public void setDeltaY(int deltaY)
	{
		this.deltaY = deltaY;
	}

	public int getDeltaY()
	{
		return deltaY;
	}
	 */
	public Shape getShape()
	{
		return shape;
	}

	public void setShape(Shape shape)
	{
		this.shape = shape;
	}

	public void setImageRotationAngle(int rotationAngle)
	{
		this.imageRotationAngle = rotationAngle%360;
	}

	public int getImageRotationAngle()
	{
		return imageRotationAngle;
	}



	//---------------Previous code from here----------------------------------------------


	// The victory condition map.
	private HashMap<String, Integer> victoryConditionMap;

	// The back ground.
	private String backGround = "";
	private Sprite sprite =null;
	// Constructor GameObject: Instantiates a new game object.


	public Sprite getSprite(){
		return sprite;
	}
	/* Method getVictoryConditionMap: Gets the victory condition map. */
	public HashMap<String, Integer> getVictoryConditionMap()
	{
		return victoryConditionMap;
	}

	/* Method setVictoryConditionMap: Sets the victory condition map. */
	public void setVictoryConditionMap(HashMap<String, Integer> victoryConditionMap)
	{
		this.victoryConditionMap = victoryConditionMap;
	}

	/* Method saveFile: Contains the Save file logic. */
	public void saveFile(Document doc, Element rootElement)
	{

		@SuppressWarnings("rawtypes")
		Iterator itr = this.victoryConditionMap.entrySet().iterator();
		while (itr.hasNext())
		{

			@SuppressWarnings("rawtypes")
			Map.Entry pairs = (Map.Entry) itr.next();
			Element conditionMap = doc.createElement("conditionMap");
			Element key = doc.createElement("conditionKey");
			key.appendChild(doc.createTextNode((String) pairs.getKey()));
			conditionMap.appendChild(key);
			Element value = doc.createElement("conditionValue");
			value.appendChild(doc.createTextNode(((Integer) pairs.getValue()).toString()));
			conditionMap.appendChild(value);
			rootElement.appendChild(conditionMap);
		}

		Element backGround = doc.createElement("backGround");
		backGround.appendChild(doc.createTextNode(getBackGround()));
		rootElement.appendChild(backGround);
	}

	/* Method getBackGround: Gets the back ground. */
	public String getBackGround()
	{
		return backGround;
	}

	/* Method setBackGround : Sets the back ground. */
	public void setBackGround(String backGround)
	{
		this.backGround = backGround;
	}

	public void setAngle(int angle)
	{
		this.angle = angle;

	}

	public void setSpeed(int speed)
	{
		this.speed = speed;
	}

	public int getAngle(){
		return this.angle;
	}

	public int getSpeed(){
		return this.speed;
	}

	public void setLastVisibilityToggle(long lastVisibilityToggle)
	{
		this.lastVisibilityToggle = lastVisibilityToggle;
	}

	public long getLastVisibilityToggle()
	{
		return lastVisibilityToggle;
	}

	public Boolean isVisible()
	{
		return visible;
	}

	public void setVisible(Boolean visible)
	{
		this.visible = visible;
	}

	public Boolean isRotatedFlag()
	{
		return rotatedFlag;
	}

	public void setRotatedFlag(Boolean rotatedFlag)
	{
		this.rotatedFlag = rotatedFlag;
	}

	public int getInitialHeight()
	{
		return initialHeight;
	}

	public int getInitialWidth()
	{
		return initialWidth;
	}

//	objectId", "xCoordinate", "yCoordinate", "height", "width", "speed", "angle", "shape",
//	"color", "visible", "lastVisibilityToggle", "imageRotationAngle", 
//	"initialHeight", "initialWidth", "rotatedFlag"};

	public String getPropertyValue(String propertyName){
		String propertyValue = null;
		if(propertyName.equals("objectId")){
			propertyValue= (Integer.toString(getObjectId()));
		}else if(propertyName.equals("xCoordinate")){
			propertyValue= (Integer.toString(getX()));
		}else if(propertyName.equals("yCoordinate")){
			propertyValue= (Integer.toString(getY()));
		}else if(propertyName.equals("height")){
			propertyValue= (Integer.toString(getObjectHeight()));
		}else if(propertyName.equals("width")){
			propertyValue= (Integer.toString(getObjectWidth()));
		}else if(propertyName.equals("speed")){
			propertyValue= (Integer.toString(getSpeed()));
		}else if(propertyName.equals("angle")){
			propertyValue= (Integer.toString(getAngle()));
		}else if(propertyName.equals("shape")){
			propertyValue= (getShape().name());
		}else if(propertyName.equals("color")){
			if(getColor() != null){
				propertyValue= (Integer.toString(getColor().getRGB()));
			}
		}else if(propertyName.equals("visible")){
			propertyValue= (isVisible().toString());
		}else if(propertyName.equals("lastVisibilityToggle")){
			propertyValue= (Long.toString(getLastVisibilityToggle()));
		}else if(propertyName.equals("imageRotationAngle")){
			propertyValue= (Integer.toString(getImageRotationAngle()));
		}else if(propertyName.equals("initialHeight")){
			propertyValue= (Integer.toString(getInitialHeight()));
		}else if(propertyName.equals("initialWidth")){
			propertyValue= (Integer.toString(getInitialWidth()));
		}else if(propertyName.equals("rotatedFlag")){
			propertyValue= (isRotatedFlag().toString());
		}
		return propertyValue;
	}

	public void setPropertyValue(String propertyName, String propertyValue){
	
		if(propertyName.equals("objectId")){
			setObjectId(Integer.parseInt(propertyValue));
		}else if(propertyName.equals("xCoordinate")){
			setX(Integer.parseInt(propertyValue));
		}else if(propertyName.equals("yCoordinate")){
			setY(Integer.parseInt(propertyValue));
		}else if(propertyName.equals("height")){
			setObjectHeight(Integer.parseInt(propertyValue));
		}else if(propertyName.equals("width")){
			setObjectWidth(Integer.parseInt(propertyValue));
		}else if(propertyName.equals("speed")){
			setSpeed(Integer.parseInt(propertyValue));
		}else if(propertyName.equals("angle")){
			setAngle(Integer.parseInt(propertyValue));
		}else if(propertyName.equals("shape")){
			if(propertyValue.equals("OVAL")){
				setShape(Shape.OVAL);
			}else if(propertyValue.equals("RECTANGLE")){
				setShape(Shape.RECTANGLE);
			}else if(propertyValue.equals("IMAGE")){
				setShape(Shape.IMAGE);
			}else if(propertyValue.equals("TRANSPERENTIMAGE")){
				setShape(Shape.TRANSPERENTIMAGE);
			}
		}else if(propertyName.equals("color")){
			if(propertyValue != null){
				setColor(new Color(Integer.parseInt(propertyValue)));
			}
		}else if(propertyName.equals("visible")){
			if(propertyValue.equals("true")){
				setVisible(true);
			}else if(propertyValue.equals("false")){
				setVisible(false);
			}
		}else if(propertyName.equals("lastVisibilityToggle")){
			setLastVisibilityToggle(Long.parseLong(propertyValue));
		}else if(propertyName.equals("imageRotationAngle")){
			setImageRotationAngle(Integer.parseInt(propertyValue));
		//}else if(propertyName.equals("initialHeight")){
		//	set(Integer.parseInt(propertyValue));
		//}else if(propertyName.equals("initialWidth")){
		//	propertyValue= (Integer.toString(getInitialWidth()));
		}else if(propertyName.equals("rotatedFlag")){
			if(propertyValue.equals("true")){
				setRotatedFlag(true);
			}else if(propertyValue.equals("false")){
				setRotatedFlag(false);
			}
		}

		}



}
